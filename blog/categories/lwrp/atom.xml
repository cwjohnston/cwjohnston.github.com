<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lwrp | rooted - a code blog]]></title>
  <link href="http://rootdown.net/blog/categories/lwrp/atom.xml" rel="self"/>
  <link href="http://rootdown.net/"/>
  <updated>2015-04-17T22:39:15-06:00</updated>
  <id>http://rootdown.net/</id>
  <author>
    <name><![CDATA[Cameron Johnston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HipChat LWRP for Chef]]></title>
    <link href="http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef/"/>
    <updated>2012-05-04T12:22:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef</id>
    <content type="html"><![CDATA[<p>Since releasing a Campfire LWRP for Chef a few weeks ago, my team has evaluated
and subsequently transitioned to <a href="http://www.hipchat.com">Atlassian's HipChat service</a>.
Luckily I was able to reuse the framework I had already created for Campfire as the
basis for a HipChat LWRP.</p>

<p>The LWRP should work with any modern version of Chef. When you use <code>include_recipe</code>
to access the LWRP in your own recipes, the default recipe for this cookbook will install
the required <a href="http://rubygems.org/gems/hipchat">'hipchat' gem</a>.</p>

<h2>Attributes</h2>

<ul>
<li><code>room</code> - the name of the room you would like to speak into (requied).</li>
<li><code>token</code> - authentication token for your HipChat account (required).</li>
<li><code>nickname</code> - the nickname to be used when speaking the message (required).</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>hipchat_msg</code> resource is used.</li>
<li><code>notify</code> - toggles whether or not users in the room should be notified by this message (defaults to true).</li>
<li><code>color</code> - sets the color of the message in HipChat. Supported colors include: yellow, red, green, purple, or random (defaults to yellow).</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to HipChat (defaults to true).</li>
</ul>


<h2>Usage example</h2>

<p>```ruby
include_recipe 'hipchat'</p>

<p>hipchat_msg 'bad news' do
  room 'The Pod Bay'
  token '0xdedbeef0xdedbeef0xdedbeef'
  nickname 'HAL9000'
  message "Sorry Dave, I'm afraid I can't do that: #{some_error}"
  color 'red'
end
```</p>

<h2>Availability</h2>

<p>You can find this cookbook <a href="http://www.github.com/cwjohnston/chef-hipchat">on github</a> or on the <a href="http://community.opscode.com/cookbooks/hipchat">Opscode community site</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding resource_tag LWRP to the aws cookbook]]></title>
    <link href="http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook/"/>
    <updated>2012-04-14T15:08:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook</id>
    <content type="html"><![CDATA[<p>This weekend I decided that I'd had enough with reusing the same pattern for manipulating tags on EC2 instances across multiple recipes. Since Opscode already publishes an <code>aws</code> cookbook with providers for other AWS resources, I figured it would be worthwhile to create a provider for manipulating these tags and contribute it back upstream.</p>

<p>The result of this Saturday project is the <code>resource_tag</code> LWRP. Source available <a href="https://github.com/cwjohnston/chef-opscode-aws/commit/fac8434abc380a903397be2605c48919fd128e6f">here</a>, Opscode ticket <a href="http://tickets.opscode.com/browse/COOK-1195">here</a>.</p>

<h2>Actions</h2>

<ul>
<li><code>add</code> - Add tags to a resource.</li>
<li><code>update</code> - Add or modify existing tags on a resource -- this is the default action.</li>
<li><code>remove</code> - Remove tags from a resource, but only if the specified values match the existing ones.</li>
<li><code>force_remove</code> - Remove tags from a resource, regardless of their values.</li>
</ul>


<h2>Attribute Parameters</h2>

<ul>
<li><code>aws_secret_access_key</code>, <code>aws_access_key</code> - passed to <code>Opscode::AWS:Ec2</code> to authenticate, required.</li>
<li><code>tags</code> - a hash of key value pairs to be used as resource tags, (e.g. <code>{ "Name" =&gt; "foo", "Environment" =&gt; node.chef_environment }</code>,) required.</li>
<li><code>resource_id</code> - resources whose tags will be modified. The value may be a single ID as a string or multiple IDs in an array. If no <code>resource_id</code> is specified the name attribute will be used.</li>
</ul>


<h2>Usage</h2>

<p><code>resource_tag</code> can be used to manipulate the tags assigned to one or more AWS resources, i.e. ec2 instances, ebs volumes or ebs volume snapshots.</p>

<p>``` ruby
include_recipe "aws"
aws = data_bag_item("aws", "main")</p>

<h1>Assigining tags to a node to reflect it's role and environment:</h1>

<p>aws_resource_tag node['ec2']['instance_id'] do
  aws_access_key aws['aws_access_key_id']
  aws_secret_access_key aws['aws_secret_access_key']
  tags({"Name" => "www.example.com app server",</p>

<pre><code>    "Environment" =&gt; node.chef_environment})
</code></pre>

<p>  action :update
end</p>

<h1>Assigning a set of tags to multiple resources, e.g. ebs volumes in a disk set:</h1>

<p>aws_resource_tag 'my awesome raid set' do
  aws_access_key aws['aws_access_key_id']
  aws_secret_access_key aws['aws_secret_access_key']
  resource_id [ "vol-d0518cb2", "vol-fad31a9a", "vol-fb106a9f", "vol-74ed3b14" ]
  tags({"Name" => "My awesome RAID disk set",</p>

<pre><code>    "Environment" =&gt; node.chef_environment})
</code></pre>

<p>end
```</p>

<p>When setting tags on the node's own EC2 instance, I recommend wrapping <code>resource_tag</code> resources in a conditional like <code>if node.has_key?('ec2')</code> so that your recipe will still run on Chef nodes outside of EC2 as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Campfire sing-a-longs with Chef]]></title>
    <link href="http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef/"/>
    <updated>2012-04-12T22:01:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef</id>
    <content type="html"><![CDATA[<p>Like many small teams, Needle uses <a href="http://www.campfirenow.com">37signals' Campfire</a> chat platform for collaborating online. Along with messages exchanged between coworkers, we also use Campfire for announcing new git commits, jira tickets and successful application deployments.</p>

<p>Since the code I've been using to send messages from Chef recipes to Campfire is virtually identical between a number of our cookbooks, I decided to turn that code into a <a href="http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29">LWRP</a> that anyone can use in their own recipes. The cookbook for this LWRP is <a href="http://github.com/cwjohnston/chef-campfire">available on github</a>.</p>

<h2>Requirements</h2>

<ul>
<li>a Campfire API token (these are unique to each Campfire user, so if you want your messages to come from a particular user, get their token)</li>
<li>the <code>tinder</code> gem (installed by the <code>campfire::default</code> recipe)</li>
</ul>


<h2>Attributes</h2>

<ul>
<li><code>subdomain</code> - the subdomain for your Campfire instance (required)</li>
<li><code>room</code> - the name of the room you would like to speak into (requied)</li>
<li><code>token</code> - authentication token for your Campfire account (required)</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>campfire_msg</code> resource is used.</li>
<li><code>paste</code> - toggles whether or not to send the message as a monospaced "paste" (defaults to false)</li>
<li><code>play_before</code> - play the specified sound before speaking the message</li>
<li><code>play_after</code> - play the specified sound after speaking the message</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to Campfire (defaults to true)</li>
</ul>


<p>A list of emoji and sounds available in Campfire can be found here: http://www.emoji-cheat-sheet.com/</p>

<h2>Usage examples</h2>

<p>``` ruby
include_recipe 'campfire'</p>

<p>campfire_msg 'bad news' do
  subdomain 'example'
  room 'Important Stuff'
  token '0xdedbeef0xdedbeef0xdedbeef'
  message "I have some bad news... there was an error: #{some_error}"
  play_after 'trombone'
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Loggly devices and inputs via Chef]]></title>
    <link href="http://rootdown.net/blog/2011/12/12/managing-loggly-devices-and-inputs-via-chef/"/>
    <updated>2011-12-12T15:19:00-07:00</updated>
    <id>http://rootdown.net/blog/2011/12/12/managing-loggly-devices-and-inputs-via-chef</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Recently I have been experimenting with the logging-as-a-service platform at <a href="http://loggly.com/">Loggly</a>. It seems pretty promising, and there's a free tier for those who are indexing less than 200MB per day.</p>

<p>Since I am using Chef to manage my systems, I decided I would take a crack at writing a <a href="http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29">LWRP</a> that would allow me to manage devices and inputs on my Loggly account through Chef. This makes it possible for new nodes to register themselves as Loggly devices when they are provisioned, without requiring me to make a trip to the Loggly control panel. The resulting cookbook is available here: <a href="http://github.com/cwjohnston/chef-loggly">http://github.com/cwjohnston/chef-loggly</a></p>

<h1>Requirements</h1>

<ul>
<li>Valid Loggly account username and password</li>
<li><code>json</code> ruby gem</li>
</ul>


<h2>Required node attributes</h2>

<ul>
<li><code>node['loggly']['username']</code> - Your Loggly username.</li>
<li><code>node['loggly']['password']</code> - Your Loggly password.</li>
</ul>


<p>In the future these attributes should be made optional so that usernames and passwords can be specified as parameters for resource attributes.</p>

<h1>Recipes</h1>

<ul>
<li><code>default</code> - simply installs the <code>json</code> gem. Chef requires this gem as well, so it should already be available.</li>
<li><code>rsyslog</code> - creates a loggly input for receiving syslog messages, registers the node as a device on that input and configures rsyslog to forward syslog messages there.</li>
</ul>


<h1>Resources</h1>

<h2><code>loggly_input</code> - manage a log input</h2>

<h3>Attributes</h3>

<ul>
<li><code>domain</code> - The subdomain for your loggly account</li>
<li><code>description</code> - An optional descriptor for the input</li>
<li><code>type</code> - The kind of input to create. May be one of the following:

<ul>
<li><code>http</code></li>
<li><code>syslogudp</code></li>
<li><code>syslogtcp</code></li>
<li><code>syslog_tls</code></li>
<li><code>syslogtcp_strip</code></li>
<li><code>syslogudp_strip</code></li>
</ul>
</li>
</ul>


<h3>Actions</h3>

<ul>
<li><code>create</code> - create the named input (default)</li>
<li><code>delete</code> - delete the named input</li>
</ul>


<h3>Usage</h3>

<p>``` ruby
loggly_input "production-syslog" do</p>

<pre><code>domain "examplecorp"
type "syslogtcp"
description "syslog messages from production nodes"
action :create
</code></pre>

<p>end
```</p>

<h2><code>loggly_device</code> - manage a device which sends logs to an input</h2>

<p>The name of a <code>loggly_device</code> resource should be the IP address for the device. Loggly doesn't do DNS lookups, it just wants the device's IP.</p>

<h3>Resource Attributes</h3>

<ul>
<li><code>username</code> - Your Loggly username. if no value is provided for this attribute, the value of <code>node['loggly']['username']</code> will be used.</li>
<li><code>password</code> - Your Loggly password. if no value is provided for this attribute, the value of <code>node['loggly']['password']</code> will be used.</li>
<li><code>domain</code> - The subdomain for your loggly account</li>
<li><code>input</code> - the name of the input this device should be added to</li>
</ul>


<h3>Resource Actions</h3>

<ul>
<li><code>add</code> - add the device to the named input (default)</li>
<li><code>delete</code> - remove the device from the named input</li>
</ul>


<h3>Usage</h3>

<p>``` ruby
loggly_device node[:ipaddress] do</p>

<pre><code>domain "examplecorp"
input "production-syslog"
action :add
</code></pre>

<p>end
```</p>
]]></content>
  </entry>
  
</feed>
