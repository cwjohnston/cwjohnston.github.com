<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | rooted - a code blog]]></title>
  <link href="http://rootdown.net/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://rootdown.net/"/>
  <updated>2014-12-31T11:10:59-07:00</updated>
  <id>http://rootdown.net/</id>
  <author>
    <name><![CDATA[Cameron Johnston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Silencing Sensu with a Chef Handler]]></title>
    <link href="http://rootdown.net/blog/2013/09/25/silencing-sensu-with-a-chef-handler/"/>
    <updated>2013-09-25T10:43:00-06:00</updated>
    <id>http://rootdown.net/blog/2013/09/25/silencing-sensu-with-a-chef-handler</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I have a lot of warm feelings for <a href="http://www.sensuapp.org/">Sensu</a>, a flexible, scalable open source monitoring framework. At <a href="http://www.needle.com">Needle</a> our team has used Chef to build a Sensu instance for each of our environments, allowing us to test our automated monitoring configuration before promoting it to production, just like any other code we deploy.</p>

<p>Speaking of deploying code, isn't it obnoxious to see alerts from your monitoring system when you know that your CM tool or deploy method is running? We think so too, so I set about writing a <a href="https://docs.chef.io/handlers.html">Chef handler</a> to take care of this annoyance.</p>

<h1>Sensu API and Stashes</h1>

<p>Among Sensu's virtues is its <a href="http://sensuapp.org/docs/0.11/api">RESTful API</a> which provides access to the data Sensu servers collect, such as clients &amp; events.</p>

<p>The API also exposes an interface to <a href="http://sensuapp.org/docs/0.11/api-stashes">stashes</a>. Stashes are arbitrary JSON documents, so any JSON formatted data can be stored under the <code>/stashes</code> API endpoint.</p>

<p>Sensu handlers are expected to check the stashes under the <code>/stashes/silence</code> path when processing events, and silence events whose client has a matching stash at <code>/stashes/silence/$CLIENT</code> or whose client and check match a stash at <code>/stashes/silence/$CLIENT/$CHECK</code>.</p>

<h1>Chef</h1>

<p>Chef's handler functionality can be used to trigger certain behaviors in response to specific situations during a chef-client run. At this time there are three different handler types implemented by <code>Chef::Handler</code>:</p>

<ul>
<li>start handlers, triggered when the defined aspect of a chef-run starts</li>
<li>exception handlers, triggered when the defined aspect of a chef-run fails</li>
<li>report handlers, triggered when the defined aspect of a chef-run succeeds</li>
</ul>


<h1>Tying it all together</h1>

<p>Combined, Sensu's stash API endpoint and Chef's exception and report handlers provide an excellent means for Chef to silence Sensu alerts during the time it is running on a node.</p>

<p>We achieved our goal by implementing <a href="https://github.com/needle-cookbooks/chef-sensu-handler/blob/master/files/default/handlers/sensu_handlers.rb#L40-L50"><code>Chef::Handler::Sensu::Silence</code></a>, which runs as a start handler, and <a href="https://github.com/needle-cookbooks/chef-sensu-handler/blob/master/files/default/handlers/sensu_handlers.rb#L52-L62"><code>Chef::Handler::Sensu::Unsilence</code></a>, which runs as both an exception and a report handler. All of this is bundled up in our <a href="https://github.com/needle-cookbooks/chef-sensu-handler"><code>chef-sensu-handler</code></a> cookbook.</p>

<p>The cookbook installs and configures the handler using the <code>node['chef_client']['sensu_api_url']</code> attribute. Once configured, the handler will attempt to create a stash under <code>/stashes/silence/$CLIENT</code> when the Chef run starts, and delete that stash when the Chef run fails or succeeds.</p>

<p>We also wanted to guard against conditions where Chef could fail catastrophically and its exception handlers might not run. To counter that possibility, the handler writes a timestamp and owner name into the stash it creates when silencing the client:</p>

<p><code>
{ "timestamp": 1380133104, "owner": "chef" }
</code></p>

<p>We then authored a Sensu plugin, <a href=""><code>check-silenced.rb</code></a>, which compares the timestamp in existing silence stashes against a configurable timeout (in seconds). Once configured as part of our Sensu monitoring system, this plugin acts as a safety net which prevents clients from being silenced too long.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HipChat LWRP for Chef]]></title>
    <link href="http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef/"/>
    <updated>2012-05-04T12:22:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef</id>
    <content type="html"><![CDATA[<p>Since releasing a Campfire LWRP for Chef a few weeks ago, my team has evaluated
and subsequently transitioned to <a href="http://www.hipchat.com">Atlassian's HipChat service</a>.
Luckily I was able to reuse the framework I had already created for Campfire as the
basis for a HipChat LWRP.</p>

<p>The LWRP should work with any modern version of Chef. When you use <code>include_recipe</code>
to access the LWRP in your own recipes, the default recipe for this cookbook will install
the required <a href="http://rubygems.org/gems/hipchat">'hipchat' gem</a>.</p>

<h2>Attributes</h2>

<ul>
<li><code>room</code> - the name of the room you would like to speak into (requied).</li>
<li><code>token</code> - authentication token for your HipChat account (required).</li>
<li><code>nickname</code> - the nickname to be used when speaking the message (required).</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>hipchat_msg</code> resource is used.</li>
<li><code>notify</code> - toggles whether or not users in the room should be notified by this message (defaults to true).</li>
<li><code>color</code> - sets the color of the message in HipChat. Supported colors include: yellow, red, green, purple, or random (defaults to yellow).</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to HipChat (defaults to true).</li>
</ul>


<h2>Usage example</h2>

<p>```ruby
include_recipe 'hipchat'</p>

<p>hipchat_msg 'bad news' do
  room 'The Pod Bay'
  token '0xdedbeef0xdedbeef0xdedbeef'
  nickname 'HAL9000'
  message "Sorry Dave, I'm afraid I can't do that: #{some_error}"
  color 'red'
end
```</p>

<h2>Availability</h2>

<p>You can find this cookbook <a href="http://www.github.com/cwjohnston/chef-hipchat">on github</a> or on the <a href="http://community.opscode.com/cookbooks/hipchat">Opscode community site</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding resource_tag LWRP to the aws cookbook]]></title>
    <link href="http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook/"/>
    <updated>2012-04-14T15:08:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook</id>
    <content type="html"><![CDATA[<p>This weekend I decided that I'd had enough with reusing the same pattern for manipulating tags on EC2 instances across multiple recipes. Since Opscode already publishes an <code>aws</code> cookbook with providers for other AWS resources, I figured it would be worthwhile to create a provider for manipulating these tags and contribute it back upstream.</p>

<p>The result of this Saturday project is the <code>resource_tag</code> LWRP. Source available <a href="https://github.com/cwjohnston/chef-opscode-aws/commit/fac8434abc380a903397be2605c48919fd128e6f">here</a>, Opscode ticket <a href="http://tickets.opscode.com/browse/COOK-1195">here</a>.</p>

<h2>Actions</h2>

<ul>
<li><code>add</code> - Add tags to a resource.</li>
<li><code>update</code> - Add or modify existing tags on a resource -- this is the default action.</li>
<li><code>remove</code> - Remove tags from a resource, but only if the specified values match the existing ones.</li>
<li><code>force_remove</code> - Remove tags from a resource, regardless of their values.</li>
</ul>


<h2>Attribute Parameters</h2>

<ul>
<li><code>aws_secret_access_key</code>, <code>aws_access_key</code> - passed to <code>Opscode::AWS:Ec2</code> to authenticate, required.</li>
<li><code>tags</code> - a hash of key value pairs to be used as resource tags, (e.g. <code>{ "Name" =&gt; "foo", "Environment" =&gt; node.chef_environment }</code>,) required.</li>
<li><code>resource_id</code> - resources whose tags will be modified. The value may be a single ID as a string or multiple IDs in an array. If no <code>resource_id</code> is specified the name attribute will be used.</li>
</ul>


<h2>Usage</h2>

<p><code>resource_tag</code> can be used to manipulate the tags assigned to one or more AWS resources, i.e. ec2 instances, ebs volumes or ebs volume snapshots.</p>

<p>``` ruby
include_recipe "aws"
aws = data_bag_item("aws", "main")</p>

<h1>Assigining tags to a node to reflect it's role and environment:</h1>

<p>aws_resource_tag node['ec2']['instance_id'] do
  aws_access_key aws['aws_access_key_id']
  aws_secret_access_key aws['aws_secret_access_key']
  tags({"Name" => "www.example.com app server",</p>

<pre><code>    "Environment" =&gt; node.chef_environment})
</code></pre>

<p>  action :update
end</p>

<h1>Assigning a set of tags to multiple resources, e.g. ebs volumes in a disk set:</h1>

<p>aws_resource_tag 'my awesome raid set' do
  aws_access_key aws['aws_access_key_id']
  aws_secret_access_key aws['aws_secret_access_key']
  resource_id [ "vol-d0518cb2", "vol-fad31a9a", "vol-fb106a9f", "vol-74ed3b14" ]
  tags({"Name" => "My awesome RAID disk set",</p>

<pre><code>    "Environment" =&gt; node.chef_environment})
</code></pre>

<p>end
```</p>

<p>When setting tags on the node's own EC2 instance, I recommend wrapping <code>resource_tag</code> resources in a conditional like <code>if node.has_key?('ec2')</code> so that your recipe will still run on Chef nodes outside of EC2 as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Campfire sing-a-longs with Chef]]></title>
    <link href="http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef/"/>
    <updated>2012-04-12T22:01:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef</id>
    <content type="html"><![CDATA[<p>Like many small teams, Needle uses <a href="http://www.campfirenow.com">37signals' Campfire</a> chat platform for collaborating online. Along with messages exchanged between coworkers, we also use Campfire for announcing new git commits, jira tickets and successful application deployments.</p>

<p>Since the code I've been using to send messages from Chef recipes to Campfire is virtually identical between a number of our cookbooks, I decided to turn that code into a <a href="http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29">LWRP</a> that anyone can use in their own recipes. The cookbook for this LWRP is <a href="http://github.com/cwjohnston/chef-campfire">available on github</a>.</p>

<h2>Requirements</h2>

<ul>
<li>a Campfire API token (these are unique to each Campfire user, so if you want your messages to come from a particular user, get their token)</li>
<li>the <code>tinder</code> gem (installed by the <code>campfire::default</code> recipe)</li>
</ul>


<h2>Attributes</h2>

<ul>
<li><code>subdomain</code> - the subdomain for your Campfire instance (required)</li>
<li><code>room</code> - the name of the room you would like to speak into (requied)</li>
<li><code>token</code> - authentication token for your Campfire account (required)</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>campfire_msg</code> resource is used.</li>
<li><code>paste</code> - toggles whether or not to send the message as a monospaced "paste" (defaults to false)</li>
<li><code>play_before</code> - play the specified sound before speaking the message</li>
<li><code>play_after</code> - play the specified sound after speaking the message</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to Campfire (defaults to true)</li>
</ul>


<p>A list of emoji and sounds available in Campfire can be found here: http://www.emoji-cheat-sheet.com/</p>

<h2>Usage examples</h2>

<p>``` ruby
include_recipe 'campfire'</p>

<p>campfire_msg 'bad news' do
  subdomain 'example'
  room 'Important Stuff'
  token '0xdedbeef0xdedbeef0xdedbeef'
  message "I have some bad news... there was an error: #{some_error}"
  play_after 'trombone'
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using deploy_wrapper to set the stage for deployments via Chef]]></title>
    <link href="http://rootdown.net/blog/2012/04/10/introducing-deploy-wrapper/"/>
    <updated>2012-04-10T13:25:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/10/introducing-deploy-wrapper</id>
    <content type="html"><![CDATA[<p>Chef's <code>deploy</code> and <code>deploy_revision</code> resources provide a useful mechanism for deploying applications as part of a chef-client or chef-solo run, without depending on an external system (e.g. Capistrano.) Many Chef users learning to use these resources for the first time will find that they also need to install an SSH deploy key and an SSH wrapper script for Git before they can make effective use of these deploy resources, and that the Chef wiki doesn't provide much documentation around this issue.</p>

<p>Enter <a href="http://github.com/cwjohnston/chef-deploy_wrapper"><code>deploy_wrapper</code></a>: a Chef definition which handles the installation of an SSH deploy key and SSH wrapper script to be used by a <code>deploy</code> or <code>deploy_revision</code> resource.</p>

<p>Before <code>deploy_wrapper</code>, a recipe to configure the required resources to make an automated <code>deploy</code> or <code>deploy_revision</code> possible might look something like this:</p>

<p>``` ruby</p>

<p>directory '/root/.ssh' do
  owner "root"
  group "root"
  mode 0640
end</p>

<p>directory '/opt/myapp/shared' do
  owner "root"
  group "root"
  mode 0755
  recursive true
end</p>

<p>deploy_key = data_bag_item('keys', 'myapp_deploy_key')</p>

<p>template "/root/.ssh/myapp_deploy_key" do
  source "deploy_key.erb"
  owner "root"
  group "root"
  mode 0600
  variables({ :deploy_key => deploy_key })
end</p>

<p>template "/opt/myapp/shared/myapp_deploy_wrapper.sh" do
  source "ssh_wrapper.sh.erb"
  owner "root"
  group "root"
  mode 0755
  variables({</p>

<pre><code>:deploy_key_path =&gt; "/root/.ssh/myapp_deploy_key"
</code></pre>

<p>  })
end</p>

<p>deploy_revision "/opt/myapp" do
  repository node['myapp']['repository']
  revision node['myapp']['revision']
  ...
  ssh_wrapper "/opt/myapp/shared/myapp_deploy_wrapper.sh"
end</p>

<p>```</p>

<p>Not counting the source to template files for these resources, thats almost 30 lines of code just to set the stage for a deployment. It didn't take long for me to grow tired of reusing this rather verbose pattern across a growing number of recipes.</p>

<p>Here's how I accomplish the same thing with the <code>deploy_wrapper</code> definition:</p>

<p>``` ruby
deploy_key = data_bag_item('keys', 'myapp_deploy_key')</p>

<p>deploy_wrapper "myapp" do
  ssh_wrapper_dir "/opt/myapp/shared"
  ssh_key_dir "/root/.ssh"
  ssh_key_data deploy_key
  sloppy true
end</p>

<p>deploy_revision "/opt/myapp" do
  repository node['myapp']['repository']
  revision node['myapp']['revision']
  ...
  ssh_wrapper "/opt/myapp/shared/myapp_deploy_wrapper.sh"
end
```</p>

<p>Much better, right? Well, a lot shorter anyway. Now let's talk about what the <code>deploy_wrapper</code> parameters used in the above example are doing.</p>

<p>The <code>ssh_key_dir</code> and <code>ssh_wrapper_dir</code> parameters specify directories which will be created by Chef. In the case of <code>ssh_wrapper_dir</code>, the git SSH wrapper script will automatically be created in this directory following the pattern "APPNAME_deploy_wrapper.sh", using the value of the name parameter (in this case, <code>myapp</code>) in place of "APPNAME".</p>

<p>Similarly, an SSH key file containing the data passed to the <code>ssh_key_data</code> parameter will be created in the directory specified as the value for the <code>ssh_key_dir</code> parameter. The key file will be named following the pattern "APPNAME_deploy_key", using the value of the name parameter (<code>myapp</code>) in place of "APPNAME".</p>

<p>The <code>sloppy</code> parameter is the only optional one. Because the default configuration of most most ssh installations is to require manual verification when accepting a remote host's key for the first time, the <code>sloppy</code> parameter allows one to toggle key checking (<code>StrictHostKeyChecking</code>) on or off.</p>

<p>When the value for <code>sloppy</code> is <code>true</code>, the wrapper script will accept any host key without prompting. The default value for <code>sloppy</code> is <code>false</code>, meaning that additional Chef resources, or ... <em>*gasp*</em> ... manual intervention, will be required in order to set up a <code>known_hosts</code> file before deployments can run successfully.</p>
]]></content>
  </entry>
  
</feed>
