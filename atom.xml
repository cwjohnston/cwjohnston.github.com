<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[rooted - a code blog]]></title>
  <link href="http://rootdown.net/atom.xml" rel="self"/>
  <link href="http://rootdown.net/"/>
  <updated>2014-12-31T11:10:59-07:00</updated>
  <id>http://rootdown.net/</id>
  <author>
    <name><![CDATA[Cameron Johnston]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SparkleFormation: Build infrastructure with CloudFormation without losing your sanity.]]></title>
    <link href="http://rootdown.net/blog/2014/12/31/sparkleformation-build-infrastructure-with-cloudformation-without-losing-your-sanity/"/>
    <updated>2014-12-31T10:20:00-07:00</updated>
    <id>http://rootdown.net/blog/2014/12/31/sparkleformation-build-infrastructure-with-cloudformation-without-losing-your-sanity</id>
    <content type="html"><![CDATA[<p><em>This article was originally published as part of the 2014 <a href="http://awsadvent.tumblr.com/">AWS Advent series</a>.</em></p>

<h2>Introduction</h2>

<p>This article assumes some familiarity with CloudFormation concepts such as stack parameters, resources,
mappings and outputs. See the <a href="http://awsadvent.tumblr.com/post/37391299521/cloudformation-primer">AWS Advent CloudFormation Primer</a> for an introduction.</p>

<p>Although CloudFormation templates are billed as reusable, many users will attest that as these
monolithic JSON documents grow larger, they become <a href="http://www.unixdaemon.net/cloud/the-four-stages-of-cloudformation.html">&#8220;all encompassing JSON file[s] of darkness,&#8221;</a>
and actually reusing code between templates becomes a frustrating copypasta exercise.</p>

<p>From another perspective these JSON documents are actually just hashes, and with a minimal DSL we
can build these hashes programmatically. <a href="https://github.com/sparkleformation/sparkle_formation/">SparkleFormation</a> provides a Ruby DSL for merging
and compiling hashes into CFN templates, and helpers which invoke CloudFormation&#8217;s <a href="http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference.html">intrinsic functions</a>
(e.g. Ref, Attr, Join, Map).</p>

<p>SparkleFormation&#8217;s DSL implementation is intentionally loose, imposing little of its own
opinion on how your template should be constructed. Provided you are already familiar with
CloudFormation template concepts and some minimal ammount of Ruby, the rest is merging hashes.</p>

<h2>Templates</h2>

<p>Just as with CloudFormation, the template is the high-level object. In SparkleFormation we instantiate a new template
like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>But an empty template isn&#8217;t going to help us much, so let&#8217;s step into it and at least insert the required
<code>AWSTemplateFormatVersion</code> specification:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">_set</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span><span class="p">,</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the above case we use the <code>_set</code> helper method because we are setting a top-level key with a string value.
When we are working with hashes we can use a block syntax, as shown here adding a parameter to the top-level
<code>Parameters</code> hash that CloudFormation expects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:foo</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">_set</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span><span class="p">,</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parameters</span><span class="p">(</span><span class="ss">:food</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="s1">&#39;what do you want to eat?&#39;</span>
</span><span class='line'>    <span class="n">allowed_values</span> <span class="sx">%w( tacos nachos hotdogs )</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reusability</h2>

<p>SparkleFormation provides primatives to help you build templates out of reusable code, namely:</p>

<ul>
<li>Components</li>
<li>Dynamics</li>
<li>Registries</li>
</ul>


<h3>Components</h3>

<p>Here&#8217;s a component we&#8217;ll name <code>environment</code> which defines our allowed environment parameter values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">_set</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span><span class="p">,</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">parameters</span><span class="p">(</span><span class="ss">:environment</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>    <span class="n">default</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'>    <span class="n">allowed_values</span> <span class="sx">%w( test staging production )</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resources, parameters and other CloudFormation configuration written into a SparkleFormation component are statically
inserted into any templates using the <code>load</code> method. Now all our stack templates can reuse the same component so
updating the list of environments across our entire infrastructure becomes a snap. Once a template has loaded a
component, it can then step into the configuration provided by the component to make modifications.</p>

<p>In this template example we load the <code>environment</code> component (above) and override the allowed values for the environment
parameter the component provides:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:perpetual_beta</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="ss">:environment</span><span class="p">)</span><span class="o">.</span><span class="n">overrides</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">parameters</span><span class="p">(</span><span class="ss">:environment</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">allowed_values</span> <span class="sx">%w( test staging )</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dynamics</h3>

<p>Where as components are loaded once at the instantiation of a SparkleFormation template, dynamics are inserted one or
more times throughout a template. They iteratively generate unique resources based on the name and optional
configuration they are passed when inserted.</p>

<p>In this example we insert a <code>launch_config</code> dynamic and pass it a config object containing a run list:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;zookeeper&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="ss">:base</span><span class="p">)</span><span class="o">.</span><span class="n">overrides</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">dynamic!</span><span class="p">(</span><span class="ss">:launch_config</span><span class="p">,</span> <span class="s1">&#39;zookeeper&#39;</span><span class="p">,</span> <span class="ss">:run_list</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s1">&#39;role[zookeeperd]&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>launch_config</code> dynamic (not pictured) can then use intrisic functions like <code>Fn::Join</code> to insert data passed in the config deep inside a launch
configuration, as in this case where we want our template to tell Chef what our run list should be.</p>

<h3>Registries</h3>

<p>Similar to dynamics, a registry entry can be inserted at any point in a SparkleFormation template or dynamic. e.g. a
registry entry can be used to share the same metadata between both AWS::AutoScaling::LaunchConfiguration and
AWS::EC2::Instance resources.</p>

<h2>Translating a ghost of AWS Advent past</h2>

<p>This JSON template from a previous AWS Advent article provisions a single EC2 instance into an
existing VPC subnet and security group:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;AWSTemplateFormatVersion&quot;</span> <span class="o">:</span> <span class="s2">&quot;2010-09-09&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;make an instance, based on region, ami, subnet, and security group&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;Parameters&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;KeyName&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;Name of an existing EC2 KeyPair to enable SSH access to the instance&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;String&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;VpcId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;VpcId of your existing Virtual Private Cloud (VPC)&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;SubnetId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;SubnetId of an existing subnet in your Virtual Private Cloud (VPC)&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;AmiId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;AMI to use&quot;</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;SecurityGroupId&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;SecurityGroup to use&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;Resources&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Ec2Instance&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Type&quot;</span> <span class="o">:</span> <span class="s2">&quot;AWS::EC2::Instance&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Properties&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s2">&quot;ImageId&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;AmiId&quot;</span> <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;SecurityGroupIds&quot;</span> <span class="o">:</span> <span class="p">[{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;SecurityGroupId&quot;</span> <span class="p">}],</span>
</span><span class='line'>                <span class="s2">&quot;SubnetId&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;SubnetId&quot;</span> <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;KeyName&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;KeyName&quot;</span> <span class="p">},</span>
</span><span class='line'>                <span class="s2">&quot;UserData&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Fn::Base64&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Fn::Join&quot;</span> <span class="o">:</span>
</span><span class='line'>                  <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>                        <span class="s2">&quot;#!/bin/bash -v\n&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;curl http://aprivatebucket.s3.amazonaws.com/bootstrap.sh -o /tmp/bootstrap.sh\n&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;bash /tmp/bootstrap.sh\n&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;# If all went well, signal success\n&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s2">&quot;cfn-signal -e $? -r &#39;Chef Server configuration&#39;\n&quot;</span>
</span><span class='line'>                    <span class="p">]]}}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;Outputs&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;InstanceId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Value&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;Ec2Instance&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;Instance Id of newly created instance&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;Subnet&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Value&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;SubnetId&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;Subnet of instance&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>        <span class="s2">&quot;SecurityGroupId&quot;</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;Value&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;Ref&quot;</span> <span class="o">:</span> <span class="s2">&quot;SecurityGroupId&quot;</span> <span class="p">},</span>
</span><span class='line'>            <span class="s2">&quot;Description&quot;</span> <span class="o">:</span> <span class="s2">&quot;Security Group of instance&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not terrible, but the JSON is a little hard on the eyes. Here&#8217;s the same thing in Ruby,
using SparkleFormation:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:vpc_instance</span><span class="p">)</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">set!</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">description</span> <span class="s1">&#39;make an instance, based on region, ami, subnet, and security group&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parameters</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">key_name</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Name of an existing EC2 KeyPair to enable SSH access to the instance&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">vpc_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;VpcId of your existing Virtual Private Cloud (VPC)&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">subnet_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;SubnetId of an existing subnet in your Virtual Private Cloud (VPC)&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">ami_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;AMI to use&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">security_group_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;SecurityGroup to use&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span><span class="p">(</span><span class="ss">:ec2_instance</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;AWS::EC2::Instance&#39;</span>
</span><span class='line'>    <span class="n">properties</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">image_id</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:ami_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">security_group_ids</span> <span class="o">[</span><span class="n">ref!</span><span class="p">(</span><span class="ss">:security_group_id</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>      <span class="n">subnet_id</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:subnet_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">key_name</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:key_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user_data</span> <span class="n">base64!</span><span class="p">(</span>
</span><span class='line'>        <span class="n">join!</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;#!/bin/bash -v</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;curl http://aprivatebucket.s3.amazonaws.com/bootstrap.sh -o /tmp/bootstrap.sh</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;bash /tmp/bootstrap.sh</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;# If all went well, signal success</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;cfn-signal -e $? -r &#39;Chef Server configuration&#39;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">outputs</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">instance_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Instance Id of newly created instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:instance_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">subnet</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Subnet of instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:subnet_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">security_group_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Security group of instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:security_group_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without taking advantage of any of SparkleFormation&#8217;s special capabilities, this translation is
already a few lines shorter and easier to read as well. That&#8217;s a good start, but we can do better.</p>

<p>The template format version specification and parameters required for this template are common to any
stack where EC2 compute resources may be used, whether they be single EC2 instances or
Auto Scaling Groups, so lets take advantage of some SparkleFormation features to make them reusable.</p>

<p>Here we have a <code>base</code> component that inserts the common parameters into templates which load it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">set!</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span><span class="p">,</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parameters</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">key_name</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Name of and existing EC2 KeyPair to enable SSH access to the instance&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">vpc_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;VpcId of your existing Virtual Private Cloud (VPC)&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">subnet_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;SubnetId of an existing subnet in your Virtual Private Cloud (VPC)&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">ami_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;AMI You want to use&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">security_group_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;SecurityGroup to use&#39;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">outputs</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">subnet</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Subnet of instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:subnet_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">security_group_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Security group of instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:security_group_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the template version and common parameters have moved into the new <code>base</code> component, we can
make use of them by loading that component as we instantiate our new template, specifying that the
template will override any pieces of the component where the two intersect.</p>

<p>Let&#8217;s update the SparkleFormation template to make use of the new <code>base</code> component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:vpc_instance</span><span class="p">)</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="ss">:base</span><span class="p">)</span><span class="o">.</span><span class="n">overrides</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">description</span> <span class="s1">&#39;make an instance, based on region, ami, subnet, and security group&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">resources</span><span class="p">(</span><span class="ss">:ec2_instance</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;AWS::EC2::Instance&#39;</span>
</span><span class='line'>    <span class="n">properties</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">image_id</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:ami_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">security_group_ids</span> <span class="o">[</span><span class="n">ref!</span><span class="p">(</span><span class="ss">:security_group_id</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>      <span class="n">subnet_id</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:subnet_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">key_name</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:key_name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user_data</span> <span class="n">base64!</span><span class="p">(</span>
</span><span class='line'>        <span class="n">join!</span><span class="p">(</span>
</span><span class='line'>          <span class="s2">&quot;#!/bin/bash -v</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;curl http://aprivatebucket.s3.amazonaws.com/bootstrap.sh -o /tmp/bootstrap.sh</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;bash /tmp/bootstrap.sh</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;# If all went well, signal success</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;cfn-signal -e $? -r &#39;Chef Server configuration&#39;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">outputs</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">instance_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;Instance Id of newly created instance&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:instance_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the <code>base</code>component includes the parameters we need, the template no longer explicitly
describes them.</p>

<h2>Advanced tips and tricks</h2>

<p>Since SparkleFormation is Ruby, we can get a little fancy. Let&#8217;s say we want to build 3 subnets into an existing VPC. If we know the VPC&#8217;s /16 subnet we can provide it as an environment variable (<code>export VPC_SUBNET="10.1.0.0/16"</code>), and then call that variable in a template that generates additional subnets:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">build</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">set!</span><span class="p">(</span><span class="s1">&#39;AWSTemplateFormatVersion&#39;</span><span class="p">,</span> <span class="s1">&#39;2010-09-09&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">octets</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;VPC_SUBNET].split(&#39;</span><span class="o">.</span><span class="s1">&#39;).slice(0,2).join(&#39;</span><span class="o">.</span><span class="s1">&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  subnets = %w(1 2 3)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  parameters(:vpc_id) do</span>
</span><span class='line'><span class="s1">    type &#39;</span><span class="nb">String</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    description &#39;</span><span class="no">Existing</span> <span class="no">VPC</span> <span class="no">ID</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  end</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  parameters(:route_table_id) do</span>
</span><span class='line'><span class="s1">    type &#39;</span><span class="nb">String</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    description &#39;</span><span class="no">Existing</span> <span class="no">VPC</span> <span class="no">Route</span> <span class="no">Table</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">  end</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  subnets.each do |subnet|</span>
</span><span class='line'><span class="s1">    resources(&quot;vpc_subnet_#{subnet}&quot;.to_sym) do</span>
</span><span class='line'><span class="s1">    type &#39;</span><span class="no">AWS</span><span class="o">::</span><span class="no">EC2</span><span class="o">::</span><span class="no">Subnet</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    properties do</span>
</span><span class='line'><span class="s1">      vpc_id ref!(:vpc_id)</span>
</span><span class='line'><span class="s1">      cidr_block octets + &#39;</span><span class="o">.</span><span class="s1">&#39; + subnet + &#39;</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">24</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">      availability_zone &#39;</span><span class="n">us</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mi">2</span><span class="n">a</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">    end</span>
</span><span class='line'><span class="s1">  end</span>
</span><span class='line'>
</span><span class='line'><span class="s1">  resources(&quot;vpc_subnet_route_table_association_#{subnet}&quot;.to_sym) do</span>
</span><span class='line'><span class="s1">    type &#39;</span><span class="no">AWS</span><span class="o">::</span><span class="no">EC2</span><span class="o">::</span><span class="no">SubnetRouteTableAssociation</span><span class="err">&#39;</span>
</span><span class='line'>    <span class="n">properties</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">route_table_id</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:route_table_id</span><span class="p">)</span>
</span><span class='line'>      <span class="n">subnet_id</span> <span class="n">ref!</span><span class="p">(</span><span class="s2">&quot;vpc_subnet_</span><span class="si">#{</span><span class="n">subnet</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course we could place the subnet and route table association resources into a dynamic, so that we could just call the dynamic with some config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subnets</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">subnet</span><span class="o">|</span>
</span><span class='line'>  <span class="n">dynamic!</span><span class="p">(</span><span class="ss">:vpc_subnet</span><span class="p">,</span> <span class="n">subnet</span><span class="p">,</span> <span class="n">subnet_cidr</span> <span class="o">=&gt;</span> <span class="n">octets</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="o">+</span> <span class="n">subnet</span> <span class="o">+</span> <span class="s1">&#39;.0/24&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Okay, this all sounds great! But how do I <em>operate</em> it?</h2>

<p>SparkleFormation by itself does not implement any means of sending its output to the CloudFormation
API. In this simple case, a SparkleFormation template named <code>ec2_example.rb</code> is output to JSON
which you can use with CloudFormation as usual:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;sparkle_formation&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span>
</span><span class='line'>  <span class="no">SparkleFormation</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s1">&#39;ec2_example.rb&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="https://github.com/hw-labs/knife-cloudformation">knife-cloudformation</a> plugin for Chef&#8217;s <code>knife</code> command adds sub-commands for creating, updating,
inspecting and destroying CloudFormation stacks described by SparkleFormation code or plain JSON
templates. Using knife-cloudformation does not require Chef to be part of your toolchain, it simply
leverages knife as an execution platform.</p>

<p>Advent readers may recall a previous article on <a href="http://awsadvent.tumblr.com/post/38685647817/strategies-reusable-cfn-templates">strategies for reusable CloudFormation templates</a>
which advocates a &#8220;layer cake&#8221; approach to deploying infrastructure using CloudFormation stacks:</p>

<blockquote><p>The overall approach is that your templates should have sufficient parameters and outputs to be
re-usable across environments like dev, stage, qa, or prod and that each layer’s template builds on
the next.</p></blockquote>

<p>Of course this is all well and good, until we find ourselves, once again, copying and pasting.
This time its stack outputs instead of JSON, but again, we can do better.</p>

<p>The recent 0.2.0 release of knife-cloudformation adds a new <code>--apply-stack</code> parameter
which makes operating &#8220;layer cake&#8221; infrastructure much easier.</p>

<p>When passed one or more instances of <code>--apply-stack STACKNAME</code>, knife-cloudformation will cache the outputs of the named stack
and use the values of those outputs as the default values for parameters of the same name in the stack you are creating.</p>

<p>For example, a stack &#8220;coolapp-elb&#8221; which provisions an ELB and an associated security group has been configured with the following outputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='shell'><span class='line'><span class="nv">$ </span>knife cloudformation describe coolapp-elb
</span><span class='line'>Resources <span class="k">for </span>stack: coolapp-elb
</span><span class='line'>Updated                  Logical Id                Type                                     Status
</span><span class='line'>Status Reason
</span><span class='line'>2014-11-17 22:54:28 UTC  CoolappElb               AWS::ElasticLoadBalancing::LoadBalancer
</span><span class='line'>CREATE_COMPLETE
</span><span class='line'>2014-11-17 22:54:47 UTC  CoolappElbSecurityGroup  AWS::EC2::SecurityGroup
</span><span class='line'>CREATE_COMPLETE
</span><span class='line'>
</span><span class='line'>Outputs <span class="k">for </span>stack: coolapp-elb
</span><span class='line'>Elb Dns: coolapp-elb-25352800.us-east-1.elb.amazonaws.com
</span><span class='line'>Elb Name: coolapp-elb
</span><span class='line'>Elb Security Group: coolapp-elb-CoolappElbSecurityGroup-JSR4RUT66Z66
</span></code></pre></td></tr></table></div></figure>


<p>The values from the ElbName and ElbSecurityGroup would be of use to us in attaching an app server
auto scaling group to this ELB, and we could use those values automatically by setting parameter
names in the app server template which match the ELB stack&#8217;s output names:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SparkleFormation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:coolapp_asg</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">parameters</span><span class="p">(</span><span class="ss">:elb_name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="n">parameters</span><span class="p">(</span><span class="ss">:elb_security_group</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">type</span> <span class="s1">&#39;String&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once our <code>coolapp_asg</code> template uses parameter names that match the output names from the <code>coolapp-elb</code> stack, we can deploy the app server layer &#8220;on top&#8221; of the ELB layer using <code>--apply-stack</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>knife cloudformation create coolapp-asg --apply-stack coolapp-elb
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, if we use a SparkleFormation template to build our VPC, we can set a number of VPC outputs that will be useful when building stacks inside the VPC:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">outputs</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">vpc_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;VPC ID&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:vpc_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">subnet_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;VPC Subnet ID&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:subnet_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">route_table_id</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">description</span> <span class="s1">&#39;VPC Route Table&#39;</span>
</span><span class='line'>      <span class="n">value</span> <span class="n">ref!</span><span class="p">(</span><span class="ss">:route_table</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This &#8216;apply stack&#8217; approach is just the latest way in which the SparkleFormation tool chain can help you keep your sanity when building infrastructure with CloudFormation.</p>

<h2>Further reading</h2>

<p>I hope this brief tour of SparkleFormation&#8217;s capabilities has piqued your interest. For some AWS users, the combination of
SparkleFormation and knife-cloudformation helps to address a real pain point in the infrastructure-as-code tool chain,
easing the development and operation of layered infrastructure.</p>

<p>Here&#8217;s some additional material to help you get started:</p>

<ul>
<li><a href="https://github.com/sparkleformation/sparkle_formation/tree/master/docs">SparkleFormation documentation</a> - more detailed discussion of the concepts introduced here, and mmore!</li>
<li><a href="https://github.com/hw-labs/sparkleformation-starter-kit">SparkleFormation starter kit</a> - an example repository containing some basic templates for deploying a VPC and an EC2 instance inside that VPC.</li>
<li><a href="https://www.youtube.com/watch?v=JnNWn3BoAcM&amp;t=2h40m50s">Sean Porter&#8217;s SparkleFormation ignite talk from DevOpsDays Vancouver 2014</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silencing Sensu with a Chef Handler]]></title>
    <link href="http://rootdown.net/blog/2013/09/25/silencing-sensu-with-a-chef-handler/"/>
    <updated>2013-09-25T10:43:00-06:00</updated>
    <id>http://rootdown.net/blog/2013/09/25/silencing-sensu-with-a-chef-handler</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>I have a lot of warm feelings for <a href="http://www.sensuapp.org/">Sensu</a>, a flexible, scalable open source monitoring framework. At <a href="http://www.needle.com">Needle</a> our team has used Chef to build a Sensu instance for each of our environments, allowing us to test our automated monitoring configuration before promoting it to production, just like any other code we deploy.</p>

<p>Speaking of deploying code, isn&#8217;t it obnoxious to see alerts from your monitoring system when you know that your CM tool or deploy method is running? We think so too, so I set about writing a <a href="https://docs.chef.io/handlers.html">Chef handler</a> to take care of this annoyance.</p>

<h1>Sensu API and Stashes</h1>

<p>Among Sensu&#8217;s virtues is its <a href="http://sensuapp.org/docs/0.11/api">RESTful API</a> which provides access to the data Sensu servers collect, such as clients &amp; events.</p>

<p>The API also exposes an interface to <a href="http://sensuapp.org/docs/0.11/api-stashes">stashes</a>. Stashes are arbitrary JSON documents, so any JSON formatted data can be stored under the <code>/stashes</code> API endpoint.</p>

<p>Sensu handlers are expected to check the stashes under the <code>/stashes/silence</code> path when processing events, and silence events whose client has a matching stash at <code>/stashes/silence/$CLIENT</code> or whose client and check match a stash at <code>/stashes/silence/$CLIENT/$CHECK</code>.</p>

<h1>Chef</h1>

<p>Chef&#8217;s handler functionality can be used to trigger certain behaviors in response to specific situations during a chef-client run. At this time there are three different handler types implemented by <code>Chef::Handler</code>:</p>

<ul>
<li>start handlers, triggered when the defined aspect of a chef-run starts</li>
<li>exception handlers, triggered when the defined aspect of a chef-run fails</li>
<li>report handlers, triggered when the defined aspect of a chef-run succeeds</li>
</ul>


<h1>Tying it all together</h1>

<p>Combined, Sensu&#8217;s stash API endpoint and Chef&#8217;s exception and report handlers provide an excellent means for Chef to silence Sensu alerts during the time it is running on a node.</p>

<p>We achieved our goal by implementing <a href="https://github.com/needle-cookbooks/chef-sensu-handler/blob/master/files/default/handlers/sensu_handlers.rb#L40-L50"><code>Chef::Handler::Sensu::Silence</code></a>, which runs as a start handler, and <a href="https://github.com/needle-cookbooks/chef-sensu-handler/blob/master/files/default/handlers/sensu_handlers.rb#L52-L62"><code>Chef::Handler::Sensu::Unsilence</code></a>, which runs as both an exception and a report handler. All of this is bundled up in our <a href="https://github.com/needle-cookbooks/chef-sensu-handler"><code>chef-sensu-handler</code></a> cookbook.</p>

<p>The cookbook installs and configures the handler using the <code>node['chef_client']['sensu_api_url']</code> attribute. Once configured, the handler will attempt to create a stash under <code>/stashes/silence/$CLIENT</code> when the Chef run starts, and delete that stash when the Chef run fails or succeeds.</p>

<p>We also wanted to guard against conditions where Chef could fail catastrophically and its exception handlers might not run. To counter that possibility, the handler writes a timestamp and owner name into the stash it creates when silencing the client:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ "timestamp": 1380133104, "owner": "chef" }</span></code></pre></td></tr></table></div></figure>


<p>We then authored a Sensu plugin, <a href=""><code>check-silenced.rb</code></a>, which compares the timestamp in existing silence stashes against a configurable timeout (in seconds). Once configured as part of our Sensu monitoring system, this plugin acts as a safety net which prevents clients from being silenced too long.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HipChat LWRP for Chef]]></title>
    <link href="http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef/"/>
    <updated>2012-05-04T12:22:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/05/04/hipchat-lwrp-for-chef</id>
    <content type="html"><![CDATA[<p>Since releasing a Campfire LWRP for Chef a few weeks ago, my team has evaluated
and subsequently transitioned to <a href="http://www.hipchat.com">Atlassian&#8217;s HipChat service</a>.
Luckily I was able to reuse the framework I had already created for Campfire as the
basis for a HipChat LWRP.</p>

<p>The LWRP should work with any modern version of Chef. When you use <code>include_recipe</code>
to access the LWRP in your own recipes, the default recipe for this cookbook will install
the required <a href="http://rubygems.org/gems/hipchat">&#8216;hipchat&#8217; gem</a>.</p>

<h2>Attributes</h2>

<ul>
<li><code>room</code> - the name of the room you would like to speak into (requied).</li>
<li><code>token</code> - authentication token for your HipChat account (required).</li>
<li><code>nickname</code> - the nickname to be used when speaking the message (required).</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>hipchat_msg</code> resource is used.</li>
<li><code>notify</code> - toggles whether or not users in the room should be notified by this message (defaults to true).</li>
<li><code>color</code> - sets the color of the message in HipChat. Supported colors include: yellow, red, green, purple, or random (defaults to yellow).</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to HipChat (defaults to true).</li>
</ul>


<h2>Usage example</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;hipchat&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">hipchat_msg</span> <span class="s1">&#39;bad news&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">room</span> <span class="s1">&#39;The Pod Bay&#39;</span>
</span><span class='line'>  <span class="n">token</span> <span class="s1">&#39;0xdedbeef0xdedbeef0xdedbeef&#39;</span>
</span><span class='line'>  <span class="n">nickname</span> <span class="s1">&#39;HAL9000&#39;</span>
</span><span class='line'>  <span class="n">message</span> <span class="s2">&quot;Sorry Dave, I&#39;m afraid I can&#39;t do that: </span><span class="si">#{</span><span class="n">some_error</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">color</span> <span class="s1">&#39;red&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Availability</h2>

<p>You can find this cookbook <a href="http://www.github.com/cwjohnston/chef-hipchat">on github</a> or on the <a href="http://community.opscode.com/cookbooks/hipchat">Opscode community site</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding resource_tag LWRP to the aws cookbook]]></title>
    <link href="http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook/"/>
    <updated>2012-04-14T15:08:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/14/adding-resource-tag-lwrp-to-the-aws-cookbook</id>
    <content type="html"><![CDATA[<p>This weekend I decided that I&#8217;d had enough with reusing the same pattern for manipulating tags on EC2 instances across multiple recipes. Since Opscode already publishes an <code>aws</code> cookbook with providers for other AWS resources, I figured it would be worthwhile to create a provider for manipulating these tags and contribute it back upstream.</p>

<p>The result of this Saturday project is the <code>resource_tag</code> LWRP. Source available <a href="https://github.com/cwjohnston/chef-opscode-aws/commit/fac8434abc380a903397be2605c48919fd128e6f">here</a>, Opscode ticket <a href="http://tickets.opscode.com/browse/COOK-1195">here</a>.</p>

<h2>Actions</h2>

<ul>
<li><code>add</code> - Add tags to a resource.</li>
<li><code>update</code> - Add or modify existing tags on a resource &#8211; this is the default action.</li>
<li><code>remove</code> - Remove tags from a resource, but only if the specified values match the existing ones.</li>
<li><code>force_remove</code> - Remove tags from a resource, regardless of their values.</li>
</ul>


<h2>Attribute Parameters</h2>

<ul>
<li><code>aws_secret_access_key</code>, <code>aws_access_key</code> - passed to <code>Opscode::AWS:Ec2</code> to authenticate, required.</li>
<li><code>tags</code> - a hash of key value pairs to be used as resource tags, (e.g. <code>{ "Name" =&gt; "foo", "Environment" =&gt; node.chef_environment }</code>,) required.</li>
<li><code>resource_id</code> - resources whose tags will be modified. The value may be a single ID as a string or multiple IDs in an array. If no <code>resource_id</code> is specified the name attribute will be used.</li>
</ul>


<h2>Usage</h2>

<p><code>resource_tag</code> can be used to manipulate the tags assigned to one or more AWS resources, i.e. ec2 instances, ebs volumes or ebs volume snapshots.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s2">&quot;aws&quot;</span>
</span><span class='line'><span class="n">aws</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s2">&quot;aws&quot;</span><span class="p">,</span> <span class="s2">&quot;main&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Assigining tags to a node to reflect it&#39;s role and environment:</span>
</span><span class='line'><span class="n">aws_resource_tag</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;ec2&#39;</span><span class="o">][</span><span class="s1">&#39;instance_id&#39;</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">aws_access_key</span> <span class="n">aws</span><span class="o">[</span><span class="s1">&#39;aws_access_key_id&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">aws</span><span class="o">[</span><span class="s1">&#39;aws_secret_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">tags</span><span class="p">({</span><span class="s2">&quot;Name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;www.example.com app server&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Environment&quot;</span> <span class="o">=&gt;</span> <span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="p">})</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:update</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Assigning a set of tags to multiple resources, e.g. ebs volumes in a disk set:</span>
</span><span class='line'><span class="n">aws_resource_tag</span> <span class="s1">&#39;my awesome raid set&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">aws_access_key</span> <span class="n">aws</span><span class="o">[</span><span class="s1">&#39;aws_access_key_id&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">aws_secret_access_key</span> <span class="n">aws</span><span class="o">[</span><span class="s1">&#39;aws_secret_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">resource_id</span> <span class="o">[</span> <span class="s2">&quot;vol-d0518cb2&quot;</span><span class="p">,</span> <span class="s2">&quot;vol-fad31a9a&quot;</span><span class="p">,</span> <span class="s2">&quot;vol-fb106a9f&quot;</span><span class="p">,</span> <span class="s2">&quot;vol-74ed3b14&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="n">tags</span><span class="p">({</span><span class="s2">&quot;Name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;My awesome RAID disk set&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Environment&quot;</span> <span class="o">=&gt;</span> <span class="n">node</span><span class="o">.</span><span class="n">chef_environment</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When setting tags on the node&#8217;s own EC2 instance, I recommend wrapping <code>resource_tag</code> resources in a conditional like <code>if node.has_key?('ec2')</code> so that your recipe will still run on Chef nodes outside of EC2 as well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Campfire sing-a-longs with Chef]]></title>
    <link href="http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef/"/>
    <updated>2012-04-12T22:01:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/12/campfire-sing-a-longs-with-chef</id>
    <content type="html"><![CDATA[<p>Like many small teams, Needle uses <a href="http://www.campfirenow.com">37signals&#8217; Campfire</a> chat platform for collaborating online. Along with messages exchanged between coworkers, we also use Campfire for announcing new git commits, jira tickets and successful application deployments.</p>

<p>Since the code I&#8217;ve been using to send messages from Chef recipes to Campfire is virtually identical between a number of our cookbooks, I decided to turn that code into a <a href="http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29">LWRP</a> that anyone can use in their own recipes. The cookbook for this LWRP is <a href="http://github.com/cwjohnston/chef-campfire">available on github</a>.</p>

<h2>Requirements</h2>

<ul>
<li>a Campfire API token (these are unique to each Campfire user, so if you want your messages to come from a particular user, get their token)</li>
<li>the <code>tinder</code> gem (installed by the <code>campfire::default</code> recipe)</li>
</ul>


<h2>Attributes</h2>

<ul>
<li><code>subdomain</code> - the subdomain for your Campfire instance (required)</li>
<li><code>room</code> - the name of the room you would like to speak into (requied)</li>
<li><code>token</code> - authentication token for your Campfire account (required)</li>
<li><code>message</code> - the message to speak. If a message is not specified, the name of the <code>campfire_msg</code> resource is used.</li>
<li><code>paste</code> - toggles whether or not to send the message as a monospaced &#8220;paste&#8221; (defaults to false)</li>
<li><code>play_before</code> - play the specified sound before speaking the message</li>
<li><code>play_after</code> - play the specified sound after speaking the message</li>
<li><code>failure_ok</code> - toggles whether or not to catch the exception if an error is encountered connecting to Campfire (defaults to true)</li>
</ul>


<p>A list of emoji and sounds available in Campfire can be found here: http://www.emoji-cheat-sheet.com/</p>

<h2>Usage examples</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;campfire&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">campfire_msg</span> <span class="s1">&#39;bad news&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subdomain</span> <span class="s1">&#39;example&#39;</span>
</span><span class='line'>  <span class="n">room</span> <span class="s1">&#39;Important Stuff&#39;</span>
</span><span class='line'>  <span class="n">token</span> <span class="s1">&#39;0xdedbeef0xdedbeef0xdedbeef&#39;</span>
</span><span class='line'>  <span class="n">message</span> <span class="s2">&quot;I have some bad news... there was an error: </span><span class="si">#{</span><span class="n">some_error</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">play_after</span> <span class="s1">&#39;trombone&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using deploy_wrapper to set the stage for deployments via Chef]]></title>
    <link href="http://rootdown.net/blog/2012/04/10/introducing-deploy-wrapper/"/>
    <updated>2012-04-10T13:25:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/04/10/introducing-deploy-wrapper</id>
    <content type="html"><![CDATA[<p>Chef&#8217;s <code>deploy</code> and <code>deploy_revision</code> resources provide a useful mechanism for deploying applications as part of a chef-client or chef-solo run, without depending on an external system (e.g. Capistrano.) Many Chef users learning to use these resources for the first time will find that they also need to install an SSH deploy key and an SSH wrapper script for Git before they can make effective use of these deploy resources, and that the Chef wiki doesn&#8217;t provide much documentation around this issue.</p>

<p>Enter <a href="http://github.com/cwjohnston/chef-deploy_wrapper"><code>deploy_wrapper</code></a>: a Chef definition which handles the installation of an SSH deploy key and SSH wrapper script to be used by a <code>deploy</code> or <code>deploy_revision</code> resource.</p>

<p>Before <code>deploy_wrapper</code>, a recipe to configure the required resources to make an automated <code>deploy</code> or <code>deploy_revision</code> possible might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">directory</span> <span class="s1">&#39;/root/.ssh&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0640</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s1">&#39;/opt/myapp/shared&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">deploy_key</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s1">&#39;keys&#39;</span><span class="p">,</span> <span class="s1">&#39;myapp_deploy_key&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/root/.ssh/myapp_deploy_key&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;deploy_key.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0600</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">({</span> <span class="ss">:deploy_key</span> <span class="o">=&gt;</span> <span class="n">deploy_key</span> <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/opt/myapp/shared/myapp_deploy_wrapper.sh&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;ssh_wrapper.sh.erb&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s2">&quot;root&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'>  <span class="n">variables</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:deploy_key_path</span> <span class="o">=&gt;</span> <span class="s2">&quot;/root/.ssh/myapp_deploy_key&quot;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">deploy_revision</span> <span class="s2">&quot;/opt/myapp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">repository</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;myapp&#39;</span><span class="o">][</span><span class="s1">&#39;repository&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">revision</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;myapp&#39;</span><span class="o">][</span><span class="s1">&#39;revision&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">ssh_wrapper</span> <span class="s2">&quot;/opt/myapp/shared/myapp_deploy_wrapper.sh&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not counting the source to template files for these resources, thats almost 30 lines of code just to set the stage for a deployment. It didn&#8217;t take long for me to grow tired of reusing this rather verbose pattern across a growing number of recipes.</p>

<p>Here&#8217;s how I accomplish the same thing with the <code>deploy_wrapper</code> definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deploy_key</span> <span class="o">=</span> <span class="n">data_bag_item</span><span class="p">(</span><span class="s1">&#39;keys&#39;</span><span class="p">,</span> <span class="s1">&#39;myapp_deploy_key&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">deploy_wrapper</span> <span class="s2">&quot;myapp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">ssh_wrapper_dir</span> <span class="s2">&quot;/opt/myapp/shared&quot;</span>
</span><span class='line'>  <span class="n">ssh_key_dir</span> <span class="s2">&quot;/root/.ssh&quot;</span>
</span><span class='line'>  <span class="n">ssh_key_data</span> <span class="n">deploy_key</span>
</span><span class='line'>  <span class="n">sloppy</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">deploy_revision</span> <span class="s2">&quot;/opt/myapp&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">repository</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;myapp&#39;</span><span class="o">][</span><span class="s1">&#39;repository&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">revision</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;myapp&#39;</span><span class="o">][</span><span class="s1">&#39;revision&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">ssh_wrapper</span> <span class="s2">&quot;/opt/myapp/shared/myapp_deploy_wrapper.sh&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Much better, right? Well, a lot shorter anyway. Now let&#8217;s talk about what the <code>deploy_wrapper</code> parameters used in the above example are doing.</p>

<p>The <code>ssh_key_dir</code> and <code>ssh_wrapper_dir</code> parameters specify directories which will be created by Chef. In the case of <code>ssh_wrapper_dir</code>, the git SSH wrapper script will automatically be created in this directory following the pattern &#8220;APPNAME_deploy_wrapper.sh&#8221;, using the value of the name parameter (in this case, <code>myapp</code>) in place of &#8220;APPNAME&#8221;.</p>

<p>Similarly, an SSH key file containing the data passed to the <code>ssh_key_data</code> parameter will be created in the directory specified as the value for the <code>ssh_key_dir</code> parameter. The key file will be named following the pattern &#8220;APPNAME_deploy_key&#8221;, using the value of the name parameter (<code>myapp</code>) in place of &#8220;APPNAME&#8221;.</p>

<p>The <code>sloppy</code> parameter is the only optional one. Because the default configuration of most most ssh installations is to require manual verification when accepting a remote host&#8217;s key for the first time, the <code>sloppy</code> parameter allows one to toggle key checking (<code>StrictHostKeyChecking</code>) on or off.</p>

<p>When the value for <code>sloppy</code> is <code>true</code>, the wrapper script will accept any host key without prompting. The default value for <code>sloppy</code> is <code>false</code>, meaning that additional Chef resources, or &#8230; <em>*gasp*</em> &#8230; manual intervention, will be required in order to set up a <code>known_hosts</code> file before deployments can run successfully.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Pingdom service checks with Chef]]></title>
    <link href="http://rootdown.net/blog/2012/03/16/managing-pingdom-service-checks-with-chef/"/>
    <updated>2012-03-16T14:08:00-06:00</updated>
    <id>http://rootdown.net/blog/2012/03/16/managing-pingdom-service-checks-with-chef</id>
    <content type="html"><![CDATA[<h2>Monitoring with Pingdom</h2>

<p>Swedish firm <a href="http://pingdom.com/">Pingdom</a> offers a flexible, affordable service for monitoring the availability and response time of web sites, applications and other services. At Needle we provision an instance of our chat server for each partner we work with, and as a result I&#8217;ve found myself creating a Pingdom service check to monitor each of these instances. As you might imagine, this is a rather repetitive task, and the configuration is basically the same for each service check &#8211; a process ripe for automation!</p>

<p>Thankfully Pingdom provides a <a href="http://www.pingdom.com/services/api/">REST API</a> for interacting with the service programatically, which has made it possible for me to write a Chef LWRP for creating and modifying Pingdom service checks. Source available here: <a href="http://github.com/cwjohnston/chef-pingdom">http://github.com/cwjohnston/chef-pingdom</a></p>

<h2>Requirements</h2>

<p>Requires Chef 0.7.10 or higher for Lightweight Resource and Provider support. Chef 0.10+ is recommended as this cookbook has not been tested with earlier versions.</p>

<p>A valid username, password and API key for your Pingdom account is required.</p>

<h2>Recipes</h2>

<p>This cookbook provides an empty default recipe which installs the required <code>json</code> gem (verison &lt;=1.6.1). Chef already requires this gem, so it&#8217;s really just included in the interests of completeness.</p>

<h2>Libraries</h2>

<p>This cookbook provides the <code>Opscode::Pingdom::Check</code> library module which is required by all the check providers.</p>

<h2>Resources and Providers</h2>

<p>This cookbook provides a single resource (<code>pingdom_check</code>) and corresponding provider for managing Pingdom service checks.</p>

<p><code>pingdom_check</code> resources support the actions <code>add</code> and <code>delete</code>, <code>add</code> being the default. Each <code>pingdom_check</code> resource requires the following resource attributes:</p>

<ul>
<li><code>host</code> - indicates the hostname (or IP address) which the service check will target</li>
<li><code>api_key</code> - a valid API key for your Pingdom account</li>
<li><code>username</code> - your Pingdom username</li>
<li><code>password</code> - your Pingdom password</li>
</ul>


<p><code>pingdom_check</code> resources may also specifiy values for the optional <code>type</code> and <code>check_params</code> attributes.</p>

<p>The <code>type</code> attribute will accept one of the following service check types. If no value is specified, the check type will default to <code>http</code>.</p>

<ul>
<li>http</li>
<li>tcp</li>
<li>udp</li>
<li>ping</li>
<li>dns</li>
<li>smtp</li>
<li>pop3</li>
<li>imap</li>
</ul>


<p>The optional <code>check_params</code> attribute is expected to be a hash containing key/value pairs which match the type-specific parameters defined by the <a href="http://www.pingdom.com/services/api-documentation-rest/#ResourceChecks">Pingdom API</a>. If no attributes are provided for <code>check_params</code>, the default values for type-specific defaults will be used.</p>

<h2>Usage</h2>

<p>In order to utilize this cookbook, put the following at the top of the recipe where Pingdom resources are used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">include_recipe</span> <span class="s1">&#39;pingdom&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following resource would configure a HTTP service check for the host <code>foo.example.com</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pingdom_check</span> <span class="s1">&#39;foo http check&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">host</span> <span class="s1">&#39;foo.example.com&#39;</span><span class="n">A</span>
</span><span class='line'>  <span class="n">api_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:api_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">username</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:username</span><span class="o">]</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting HTTP service check would be created using all the Pingdom defaults for HTTP service checks.</p>

<p>The following resource would configure an HTTP service check for the host <code>bar.example.com</code> utilizing some of the parameters specific to the HTTP service check type:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pingdom_check</span> <span class="s1">&#39;bar.example.com http status check&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">host</span> <span class="s1">&#39;bar.example.com&#39;</span>
</span><span class='line'>  <span class="n">api_key</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:api_key</span><span class="o">]</span>
</span><span class='line'>  <span class="n">username</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:username</span><span class="o">]</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">node</span><span class="o">[</span><span class="ss">:pingdom</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'>  <span class="n">check_params</span> <span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;/status&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:shouldcontain</span> <span class="o">=&gt;</span> <span class="s2">&quot;Everything is OK!&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:sendnotificationwhendown</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:sendtoemail</span> <span class="o">=&gt;</span> <span class="s2">&quot;true&quot;</span><span class="p">,</span>
</span><span class='line'>               <span class="ss">:sendtoiphone</span> <span class="o">=&gt;</span> <span class="s2">&quot;true&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Caveats</h2>

<p>At this time I consider the LWRP to be incomplete. The two major gaps are as follows:</p>

<ul>
<li>Changing the values for <code>check_params</code> does not actually update the service check&#8217;s configuration. I have done most of the initial work to implement this (available in the <code>check-updating</code> branch on github), but there are still bugs.</li>
<li>The LWRP has no support for managing contacts.</li>
</ul>


<h2>Future</h2>

<ul>
<li>Add <code>update</code> action for service checks which modifies existing checks to match the values from <code>check_params</code></li>
<li>Add <code>enable</code> and <code>disable</code> actions for service checks</li>
<li>Add support for managing contacts (<code>pingdom_contact</code> resource)</li>
<li>Convert <code>TrueClass</code> attribute values to <code>"true"</code> strings</li>
<li>Validate classes passed as <code>check_params</code> values</li>
<li>One must look up contact IDs manually when setting <code>contactids</code> in <code>check_params</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Loggly devices and inputs via Chef]]></title>
    <link href="http://rootdown.net/blog/2011/12/12/managing-loggly-devices-and-inputs-via-chef/"/>
    <updated>2011-12-12T15:19:00-07:00</updated>
    <id>http://rootdown.net/blog/2011/12/12/managing-loggly-devices-and-inputs-via-chef</id>
    <content type="html"><![CDATA[<h1>Introduction</h1>

<p>Recently I have been experimenting with the logging-as-a-service platform at <a href="http://loggly.com/">Loggly</a>. It seems pretty promising, and there&#8217;s a free tier for those who are indexing less than 200MB per day.</p>

<p>Since I am using Chef to manage my systems, I decided I would take a crack at writing a <a href="http://wiki.opscode.com/display/chef/Lightweight+Resources+and+Providers+%28LWRP%29">LWRP</a> that would allow me to manage devices and inputs on my Loggly account through Chef. This makes it possible for new nodes to register themselves as Loggly devices when they are provisioned, without requiring me to make a trip to the Loggly control panel. The resulting cookbook is available here: <a href="http://github.com/cwjohnston/chef-loggly">http://github.com/cwjohnston/chef-loggly</a></p>

<h1>Requirements</h1>

<ul>
<li>Valid Loggly account username and password</li>
<li><code>json</code> ruby gem</li>
</ul>


<h2>Required node attributes</h2>

<ul>
<li><code>node['loggly']['username']</code> - Your Loggly username.</li>
<li><code>node['loggly']['password']</code> - Your Loggly password.</li>
</ul>


<p>In the future these attributes should be made optional so that usernames and passwords can be specified as parameters for resource attributes.</p>

<h1>Recipes</h1>

<ul>
<li><code>default</code> - simply installs the <code>json</code> gem. Chef requires this gem as well, so it should already be available.</li>
<li><code>rsyslog</code> - creates a loggly input for receiving syslog messages, registers the node as a device on that input and configures rsyslog to forward syslog messages there.</li>
</ul>


<h1>Resources</h1>

<h2><code>loggly_input</code> - manage a log input</h2>

<h3>Attributes</h3>

<ul>
<li><code>domain</code> - The subdomain for your loggly account</li>
<li><code>description</code> - An optional descriptor for the input</li>
<li><code>type</code> - The kind of input to create. May be one of the following:

<ul>
<li><code>http</code></li>
<li><code>syslogudp</code></li>
<li><code>syslogtcp</code></li>
<li><code>syslog_tls</code></li>
<li><code>syslogtcp_strip</code></li>
<li><code>syslogudp_strip</code></li>
</ul>
</li>
</ul>


<h3>Actions</h3>

<ul>
<li><code>create</code> - create the named input (default)</li>
<li><code>delete</code> - delete the named input</li>
</ul>


<h3>Usage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">loggly_input</span> <span class="s2">&quot;production-syslog&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">domain</span> <span class="s2">&quot;examplecorp&quot;</span>
</span><span class='line'>    <span class="n">type</span> <span class="s2">&quot;syslogtcp&quot;</span>
</span><span class='line'>    <span class="n">description</span> <span class="s2">&quot;syslog messages from production nodes&quot;</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:create</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>loggly_device</code> - manage a device which sends logs to an input</h2>

<p>The name of a <code>loggly_device</code> resource should be the IP address for the device. Loggly doesn&#8217;t do DNS lookups, it just wants the device&#8217;s IP.</p>

<h3>Resource Attributes</h3>

<ul>
<li><code>username</code> - Your Loggly username. if no value is provided for this attribute, the value of <code>node['loggly']['username']</code> will be used.</li>
<li><code>password</code> - Your Loggly password. if no value is provided for this attribute, the value of <code>node['loggly']['password']</code> will be used.</li>
<li><code>domain</code> - The subdomain for your loggly account</li>
<li><code>input</code> - the name of the input this device should be added to</li>
</ul>


<h3>Resource Actions</h3>

<ul>
<li><code>add</code> - add the device to the named input (default)</li>
<li><code>delete</code> - remove the device from the named input</li>
</ul>


<h3>Usage</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">loggly_device</span> <span class="n">node</span><span class="o">[</span><span class="ss">:ipaddress</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">domain</span> <span class="s2">&quot;examplecorp&quot;</span>
</span><span class='line'>    <span class="n">input</span> <span class="s2">&quot;production-syslog&quot;</span>
</span><span class='line'>    <span class="n">action</span> <span class="ss">:add</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
